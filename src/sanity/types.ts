// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Board = {
  _type: "board";
  title?: string;
  lead?: string;
  buttonGroup?: Array<
    {
      _key: string;
    } & LinkInternal
  >;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "imageObject";
  };
};

export type LinkExternal = {
  _type: "linkExternal";
  title?: string;
  externalUrl?: string;
};

export type LinkInternal = {
  _type: "linkInternal";
  title?: string;
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
};

export type Link = {
  _type: "link";
  title?: string;
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  externalUrl?: string;
};

export type ImageObject = {
  _type: "imageObject";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  altText?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  headerNavigation?: Array<
    {
      _key: string;
    } & LinkInternal
  >;
  footerNavigation?: Array<
    {
      _key: string;
    } & Link
  >;
  contact?: {
    email?: string;
    phone?: string;
  };
  address?: {
    address?: string;
    postalCode?: string;
    location?: string;
  };
  socialMedia?: {
    linkedIn?: string;
  };
  seo?: Seo;
};

export type Seo = {
  _type: "seo";
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  blocks?: Array<
    {
      _key: string;
    } & Board
  >;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }
>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Board
  | LinkExternal
  | LinkInternal
  | Link
  | ImageObject
  | Settings
  | Seo
  | Author
  | Post
  | Category
  | Slug
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: SETTINGS_QUERY
// Query: *[_type == "settings"][0]{  headerNavigation[] {      "reference": reference -> {    _id,    _type,    "slug": slug.current,  },  externalUrl,  title,  _type,  _key,   },  footerNavigation[] {      "reference": reference -> {    _id,    _type,    "slug": slug.current,  },  externalUrl,  title,  _type,  _key,  },  address,  contact,  socialMedia,  seo,}
export type SETTINGS_QUERYResult = {
  headerNavigation: Array<{
    reference: {
      _id: string;
      _type: "post";
      slug: string | null;
    } | null;
    externalUrl: null;
    title: string | null;
    _type: "linkInternal";
    _key: string;
  }> | null;
  footerNavigation: Array<{
    reference: {
      _id: string;
      _type: "post";
      slug: string | null;
    } | null;
    externalUrl: string | null;
    title: string | null;
    _type: "link";
    _key: string;
  }> | null;
  address: {
    address?: string;
    postalCode?: string;
    location?: string;
  } | null;
  contact: {
    email?: string;
    phone?: string;
  } | null;
  socialMedia: {
    linkedIn?: string;
  } | null;
  seo: Seo | null;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)][0...12]{  _id,  title,  slug}
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
}>;
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  title,  body,  mainImage,  blocks[] {      _key,  _type,  _type == "board" => {    title,    lead,    image {      ...,      asset ->    },    buttonGroup[] {        "reference": reference -> {    _id,    _type,    "slug": slug.current,  },  externalUrl,  title,  _type,  _key,    },  },  },}
export type POST_QUERYResult = {
  title: string | null;
  body: null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  blocks: Array<{
    _key: string;
    _type: "board";
    title: string | null;
    lead: string | null;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      altText?: string;
      _type: "imageObject";
    } | null;
    buttonGroup: Array<{
      reference: {
        _id: string;
        _type: "post";
        slug: string | null;
      } | null;
      externalUrl: null;
      title: string | null;
      _type: "linkInternal";
      _key: string;
    }> | null;
  }> | null;
} | null;
// Variable: PAGE_PATHS_QUERY
// Query: *[slug != null && !(_id in path('drafts.**'))]{  _type,  _id,  "slug": slug.current}
export type PAGE_PATHS_QUERYResult = Array<
  | {
      _type: "author";
      _id: string;
      slug: string | null;
    }
  | {
      _type: "category";
      _id: string;
      slug: string | null;
    }
  | {
      _type: "post";
      _id: string;
      slug: string | null;
    }
>;

declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "settings"][0]{\n  headerNavigation[] {\n    \n  "reference": reference -> {\n    _id,\n    _type,\n    "slug": slug.current,\n  },\n  externalUrl,\n  title,\n  _type,\n  _key,\n \n  },\n  footerNavigation[] {\n    \n  "reference": reference -> {\n    _id,\n    _type,\n    "slug": slug.current,\n  },\n  externalUrl,\n  title,\n  _type,\n  _key,\n\n  },\n  address,\n  contact,\n  socialMedia,\n  seo,\n}': SETTINGS_QUERYResult;
    '*[_type == "post" && defined(slug.current)][0...12]{\n  _id,\n  title,\n  slug\n}': POSTS_QUERYResult;
    '*[_type == "post" && slug.current == $slug][0]{\n  title,\n  body,\n  mainImage,\n  blocks[] {\n    \n  _key,\n  _type,\n  _type == "board" => {\n    title,\n    lead,\n    image {\n      ...,\n      asset ->\n    },\n    buttonGroup[] {\n      \n  "reference": reference -> {\n    _id,\n    _type,\n    "slug": slug.current,\n  },\n  externalUrl,\n  title,\n  _type,\n  _key,\n\n    },\n  },\n\n  },\n}': POST_QUERYResult;
    "*[slug != null && !(_id in path('drafts.**'))]{\n  _type,\n  _id,\n  \"slug\": slug.current\n}": PAGE_PATHS_QUERYResult;
  }
}
